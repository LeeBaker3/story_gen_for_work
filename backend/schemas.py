from pydantic import BaseModel
from typing import List, Optional

# Character Detail Schema (New)


class CharacterDetail(BaseModel):
    name: str
    description: str  # e.g., "age 53", "2-year-old daughter with long blonde curly hair"
    personality: Optional[str] = None
    background: Optional[str] = None

# Page Schemas


class PageBase(BaseModel):
    page_number: int
    text: str
    image_description: Optional[str] = None  # This will be generated by AI


class PageCreate(PageBase):
    # image_path will be added after image generation
    pass


class Page(PageBase):
    id: int
    story_id: int
    image_path: Optional[str] = None  # Path to locally stored image

    class Config:
        from_attributes = True  # Corrected from orm_mode

# Story Schemas


class StoryBase(BaseModel):
    # Title is generated by AI, so not in the base for creation
    genre: str
    story_outline: str  # User's initial outline
    main_characters: List[CharacterDetail]
    num_pages: int
    tone: Optional[str] = None
    setting: Optional[str] = None
    # Add other metadata fields from PRD if necessary


class StoryCreate(StoryBase):  # This schema is for user input to generate a story
    pass


class Story(StoryBase):  # This schema is for representing a story, including AI generated title
    id: int
    title: str  # AI Generated
    owner_id: int
    pages: List[Page] = []

    class Config:
        from_attributes = True  # Corrected from orm_mode

# User Schemas


class UserBase(BaseModel):
    username: str
    email: Optional[str] = None  # Added email field


class UserCreate(UserBase):
    password: str
    # email is inherited from UserBase


class User(UserBase):
    id: int
    # email is inherited from UserBase
    stories: List[Story] = []

    class Config:
        from_attributes = True  # Corrected from orm_mode

# Token Schemas for Authentication


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: Optional[str] = None
