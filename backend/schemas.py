from pydantic import BaseModel, ConfigDict  # Added ConfigDict
from typing import List, Optional
from enum import Enum  # Added for StoryGenre
from datetime import datetime  # Ensure datetime is imported


class UserRole(str, Enum):  # Added UserRole Enum
    ADMIN = "admin"
    USER = "user"

# Story Genre Enum (New)


class StoryGenre(str, Enum):
    CHILDRENS = "Children's"
    SCI_FI = "Sci-Fi"
    DRAMA = "Drama"
    HORROR = "Horror"
    ACTION = "Action"
    FANTASY = "Fantasy"  # Added new genre
    MYSTERY = "Mystery"  # Added new genre
    ROMANCE = "Romance"  # Added new genre
    THRILLER = "Thriller"  # Added new genre
    COMEDY = "Comedy"  # Added new genre

# Image Style Enum (FR14)


class ImageStyle(str, Enum):
    DEFAULT = "Default"  # General, vibrant, clear illustration
    CARTOON = "Cartoon"
    WATERCOLOR = "Watercolor"
    PHOTOREALISTIC = "Photorealistic"
    PIXEL_ART = "Pixel Art"
    FANTASY_ART = "Fantasy Art"
    SCI_FI_CONCEPT = "Sci-Fi Concept Art"
    ANIME = "Anime"
    VINTAGE_COMIC = "Vintage Comic Book Art"
    MINIMALIST = "Minimalist"
    NOIR = "Noir"  # Added NOIR

# Word-to-Picture Ratio Enum (FR13)


class WordToPictureRatio(str, Enum):
    PER_PAGE = "One image per page"
    PER_TWO_PAGES = "One image per two pages"
    PER_PARAGRAPH = "One image per paragraph"

# Text Density Enum (New Req)


class TextDensity(str, Enum):
    CONCISE = "Concise (~30-50 words)"  # ~3-4 lines per page
    STANDARD = "Standard (~60-90 words)"  # ~5-7 lines per page
    DETAILED = "Detailed (~100-150 words)"  # ~8-10+ lines per page

# Character Detail Schema (New)


class CharacterDetail(BaseModel):
    name: str
    # Made optional as frontend now uses more specific fields
    description: Optional[str] = None
    age: Optional[int] = None
    gender: Optional[str] = None
    # E.g., "tall, with long blonde curly hair and blue eyes, often wears a red cloak"
    physical_appearance: Optional[str] = None
    # E.g., "medieval armor", "modern casual", "futuristic jumpsuit"
    clothing_style: Optional[str] = None
    # Broader personality traits, still optional
    personality: Optional[str] = None
    # Specific distinguishing traits or habits, e.g., "always carries a locket", "has a noticeable limp"
    key_traits: Optional[str] = None
    background: Optional[str] = None  # Still optional
    # Path to the generated character reference image
    reference_image_path: Optional[str] = None
    # New field: Detailed description generated by AI from the reference image
    detailed_visual_description_from_reference: Optional[str] = None
    # New field: Revised prompt from DALL-E for the reference image
    reference_image_revised_prompt: Optional[str] = None
    # New field: Gen ID from DALL-E for the reference image (currently will be None)
    reference_image_gen_id: Optional[str] = None

# Page Schemas


class PageBase(BaseModel):
    page_number: int
    text: str
    image_description: Optional[str] = None  # This will be generated by AI


class PageCreate(PageBase):
    # image_path will be added after image generation
    pass


class Page(PageBase):
    id: int
    story_id: int
    image_path: Optional[str] = None  # Path to locally stored image
    created_at: datetime  # Added
    updated_at: datetime  # Added

    model_config = ConfigDict(from_attributes=True)  # Replaced class Config

# Story Schemas


class StoryBase(BaseModel):
    title: Optional[str] = None  # Added
    genre: str
    story_outline: str  # User's initial outline
    main_characters: List[CharacterDetail]
    num_pages: int
    tone: Optional[str] = None
    setting: Optional[str] = None
    # FR14: Added image_style
    image_style: Optional[ImageStyle] = ImageStyle.DEFAULT
    # FR13: Added word_to_picture_ratio
    word_to_picture_ratio: Optional[WordToPictureRatio] = WordToPictureRatio.PER_PAGE
    # New Req: Added text_density
    text_density: Optional[TextDensity] = TextDensity.CONCISE
    # Add other metadata fields from PRD if necessary
    is_draft: Optional[bool] = True  # For FR24
    generated_at: Optional[datetime] = None  # For FR24


class StoryCreate(StoryBase):  # This schema is for user input to generate a story
    pass


class StoryTitleUpdate(BaseModel):  # New Schema for updating title
    title: str


class Story(StoryBase):  # This schema is for representing a story, including AI generated title
    id: int
    owner_id: int
    pages: List[Page] = []
    created_at: datetime  # Added based on previous work

    model_config = ConfigDict(from_attributes=True)  # Replaced class Config

# User Schemas


class UserBase(BaseModel):
    username: str
    email: Optional[str] = None
    is_active: Optional[bool] = True  # Default to True
    role: Optional[str] = 'user'  # Default to 'user'


class UserCreate(UserBase):
    password: str
    # email is inherited from UserBase


class User(UserBase):
    id: int
    # stories: list[Story] = [] # Avoid circular dependency if Story schema also refers to User

    model_config = ConfigDict(from_attributes=True)  # Correctly indented


class UserInDB(User):
    hashed_password: str

# For Admin User Management


class UserUpdateAdmin(BaseModel):
    username: Optional[str] = None
    email: Optional[str] = None
    role: Optional[str] = None  # Should be 'user' or 'admin'
    is_active: Optional[bool] = None

    model_config = ConfigDict(from_attributes=True)

# Token Schemas for Authentication


class Token(BaseModel):
    access_token: str
    token_type: str


class TokenData(BaseModel):
    username: Optional[str] = None

# Dynamic List Schemas (FR-ADM-05)


class DynamicListItemBase(BaseModel):
    item_value: str
    item_label: str
    is_active: bool = True
    sort_order: int = 0
    # For things like OpenAI style mapping
    additional_config: Optional[dict] = None


class DynamicListItemCreate(DynamicListItemBase):
    list_name: str  # Must be provided when creating an item


class DynamicListItemUpdate(BaseModel):
    item_value: Optional[str] = None
    item_label: Optional[str] = None
    is_active: Optional[bool] = None
    sort_order: Optional[int] = None
    additional_config: Optional[dict] = None


class DynamicListItem(DynamicListItemBase):
    id: int
    list_name: str
    created_at: datetime
    updated_at: datetime

    model_config = ConfigDict(from_attributes=True)


class DynamicListBase(BaseModel):
    list_name: str
    description: Optional[str] = None


class DynamicListCreate(DynamicListBase):
    pass


class DynamicListUpdate(BaseModel):
    description: Optional[str] = None


class DynamicList(DynamicListBase):
    # items: List[DynamicListItem] = [] # This is loaded via a separate endpoint if needed for full detail
    created_at: datetime
    updated_at: datetime
    # Include items when fetching a full list object
    items: List[DynamicListItem] = []

    model_config = ConfigDict(from_attributes=True)
